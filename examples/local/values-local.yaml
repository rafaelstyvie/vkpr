#
# Valores para testes locais com o k3d.
#
# helm upgrade -i vkpr -f examples/values-local.yaml ./charts/vkpr
#
# Coloque as seguintes entradas no /etc/hosts :
# 127.0.0.1    whoami.localdomain grafana.localdomain graylog.localdomain
#
# Alguns charts são antigos e falham no k8s >= 1.16. Corrija com:
# helm plugin install https://github.com/ContainerSolutions/helm-convert 
#
# IMPORTANTE: em testes locais, onde o cluster é descartável, recomendamos deixar
# o Helm criar os CRDs quando o chart permitir.

#
# INGRESS STACK
#
ingress-nginx:
  enabled: true
  controller:
    service:
      type: NodePort
      nodePorts:
        http: 32080

external-dns:
  enabled: false
cert-manager:
  enabled: false
  installCRDs: true

# chart values
ingress:
  enabled: true
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
  - host: whoami.localdomain
    paths: ["/"]

#
# LOGGING STACK:
# GRAYLOG
#
# tags do subchart graylog - SAO TOP LEVEL SEMPRE
#tags:
#  install-elasticsearch: false
#  install-mongodb: false
#elasticsearch:
#  enabled: false
#  volumeClaimTemplate:
#    storageClassName: "do-block-storage"
# mongodb do graylog
#mongodb-replicaset:
#  enabled: false
#  replicas: 1
#graylog:
#  enabled: false
#  graylog:
#    elasticsearch:
#      hosts: "http://elasticsearch-master:9200"
#    mongodb:
#      uri: mongodb://vkpr-mongodb-replicaset-client:27017/databasename?replicaSet=rs0
#    rootPassword: <ROOT_PASSWORD>
#    input:
#      tcp:
#        service:
#          type: ClusterIP
#        ports:
#          - name: gelf-tcp
#            port: 12201
#      udp:
#        service:
#          type: ClusterIP
#        ports:
#          - name: gelf-udp
#            port: 12201
#    ingress:
#      enabled: true
#      annotations:
#        ingress.kubernetes.io/ssl-redirect: "false"
#      hosts:
#        - graylog.localdomain

loki-stack:
  enabled: false

#
# MONITORING STACK
#
kube-prometheus-stack:
  enabled: true
  alertmanager:
    enabled: false
  prometheusOperator:
    enabled: true
    manageCrds: true   # ok para ambiente local
  kubeApiServer:
    enabled: true
  kubelet:
    enabled: true
  kubeControllerManager:
    enabled: true
  coreDns:
    enabled: true
  kubeDns:
    enabled: false
  kubeEtcd:
    enabled: true
  kubeScheduler:
    enabled: true
  kubeProxy:
    enabled: true
  kubeStateMetrics:
    enabled: true
  nodeExporter:
    enabled: true
  grafana:
    enabled: false
    image:
      repository: vertigo/grafana
      tag: 7.0.0
    adminPassword: "<ROOT_PASSWORD>"
    plugins:
      - grafana-piechart-panel
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
      hosts: ["grafana.localdomain"]
    grafana.ini:
      server:
        root_url: "http://grafana.localdomain:32080"
      auth.generic_oauth:
        enabled: true
        scopes: openid profile email
        client_id: grafana
        client_secret: ""
        auth_url: http://keycloak.localdomain:32080/auth/realms/vkpr/protocol/openid-connect/auth
        token_url: http://keycloak.localdomain:32080/auth/realms/vkpr/protocol/openid-connect/token
        api_url: http://keycloak.localdomain:32080/auth/realms/vkpr/protocol/openid-connect/userinfo
        allowed_domains: grafana.localdomain keycloak.localdomain
        allow_sign_up: true
  # deploy prometheus instance
  prometheus:
    enabled: true

#
# SECURITY STACK
#

#
# Vault:
# É preciso inicializar e fazer unseal
# https://learn.hashicorp.com/tutorials/vault/kubernetes-raft-deployment-guide#initialize-and-unseal-vault
# Resumo:
# kubectl get pods -l app.kubernetes.io/name=vault
# kubectl exec -ti vkpr-vault-0 -- vault operator init
# kubectl exec -ti vkpr-vault-0 -- vault operator unseal KEY # repetir 3 vezes
# 
vault:
  enabled: true
  server:
    ha:
      enabled: true
      raft:
        enabled: true
      replicas: 1
    ingress:
      enabled: true
      hosts:
        - host: vault.localdomain
          path: ["/"]

keycloak:
  enabled: false
  prometheus:
    operator:
      enabled: true
      serviceMonitor:
        namespace: vkpr 
        selector:
          release: vkpr
  keycloak:
    username: keycloak
    password: <ROOT_PASSWORD>
    extraInitContainers: |
       - name: extensions
         image: busybox
         imagePullPolicy: IfNotPresent
         command:
           - sh
         args:
           - -c
           - |
             echo "Copying extensions..."
             wget -O /deployments/keycloak-metrics-spi.jar https://github.com/aerogear/keycloak-metrics-spi/releases/download/1.0.1/keycloak-metrics-spi-1.0.1.jar
         volumeMounts:
          - name: deployments
            mountPath: /deployments
    persistence:
      dbVendor: h2
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
      #   kubernetes.io/tls-acme: "true"
      hosts:
        - keycloak.localdomain
      # tls:
      #   - hosts:
      #     - keycloak.localdomain
      #     secretName: keycloak-vkpr-cert
    extraVolumes: |
      - name: keycloak-data
        persistentVolumeClaim:
          claimName: keycloak-data-volume
      - name: vkpr-realm-secret
        secret:
          secretName: vkpr-realm-secret
      - name: deployments
        emptyDir: {}

    extraVolumeMounts: |
      - name: keycloak-data
        mountPath: "/opt/jboss/keycloak/standalone/data"
        readOnly: false
      - name: vkpr-realm-secret
        mountPath: "/realm/"
        readOnly: true
      - name: deployments
        mountPath: /opt/jboss/keycloak/standalone/deployments

    extraArgs: -Dkeycloak.import=/realm/vkpr-realm.json
