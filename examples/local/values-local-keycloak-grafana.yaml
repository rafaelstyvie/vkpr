#
# Valores para testes locais com o k3d.
# 
# O que executa:
# - Ingress controller (ingress-nginx)
# - Aplicação "whoami"
# - Keycloak
# - Grafana (OAuth)
#
# INSTALAÇÃO COM MAKEFILE:
#
# make k3d_create
# make example_local_keycloak_grafana
# make load_balancer_hosts
#
#
# INSTALAÇÃO VIA HELM (manual):
#
# kubectl create secret generic vkpr-realm-secret --from-file=examples/keycloak/realms/realm.json
# helm upgrade -i vkpr -f examples/local/values-local-keycloak-grafana.yaml ./charts/vkpr
#
# Coloque a entrada abaixo no /etc/hosts (use o IP atribuído ao load balancer):
#
# <external-ip> vkpr-grafana.default.svc vkpr-keycloak-http.default.svc
#
# Abrir a seguinte URL no browser:
#
# http://localhost:5443/
#

#
# INGRESS STACK
#
ingress-nginx:
  enabled: true

external-dns:
  enabled: false
cert-manager:
  enabled: false

# chart values
ingress:
  enabled: true
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
  - host: whoami.localdomain
    paths: ["/"]

#
# LOGGING STACK:
#

loki-stack:
  enabled: false

#
# MONITORING STACK
#
kube-prometheus-stack:
  enabled: true
  ## Manages Prometheus and Alertmanager components
  prometheusOperator:
    enabled: false
  prometheus:
    enabled: false
  alertmanager:
    enabled: false
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  grafana:
    enabled: true
    sidecar:
      datasources:
        enabled: true
    persistence:
      enabled: false
    ingress:
      enabled: true
      hosts:
      - vkpr-grafana.default.svc
    env:
      GF_AUTH_GENERIC_OAUTH_ENABLED: true
      GF_AUTH_GENERIC_OAUTH_NAME: "Keycloak"
      GF_AUTH_GENERIC_OAUTH_DISABLE_LOGIN_FORM: false
      GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN: false
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "oidc-demo"
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "60e50da1-b492-4995-9574-763fa285456c"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "http://vkpr-keycloak-http.default.svc/auth/realms/vkpr/protocol/openid-connect/auth"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "http://vkpr-keycloak-http.default.svc/auth/realms/vkpr/protocol/openid-connect/token"
      GF_AUTH_GENERIC_OAUTH_API_URL: "http://vkpr-keycloak-http.default.svc/auth/realms/vkpr/protocol/openid-connect/userinfo"
      GF_AUTH_GENERIC_OAUTH_SIGNOUT_REDIRECT_URL: "http://vkpr-keycloak-http.default.svc/auth/realms/vkpr/protocol/openid-connect/logout"
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: true
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid profile email
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: vert1234
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SERVER_ROOT_URL: "http://vkpr-grafana.default.svc/"
#
# SECURITY STACK
#
vault:
  enabled: false

keycloak:
  enabled: true
  rbac:
    create: true
  postgresql:
    enabled: false
  ingress:
    enabled: true
    tls: []
    annotations:
      kubernetes.io/ingress.class: nginx
    rules:
      - host: "vkpr-keycloak-http.default.svc"
        paths: ["/"]
  # mounts realm.json as secret
  # mounts volume as H2 database (when no postgres is used)
  extraVolumes: |
    - name: vkpr-realm-secret
      secret:
        secretName: vkpr-realm-secret
    - name: keycloak-data
      persistentVolumeClaim:
        claimName: keycloak-data-volume
  extraVolumeMounts: |
    - name: vkpr-realm-secret
      mountPath: "/realm/"
      readOnly: true
    - name: keycloak-data
      mountPath: "/opt/jboss/keycloak/standalone/data"
      readOnly: false
  extraEnv: |
    - name: KEYCLOAK_IMPORT
      value: /realm/realm.json
    - name: KEYCLOAK_USER
      value: admin
    - name: KEYCLOAK_PASSWORD
      value: vert1234
